service: sls-test

custom:
  settings:
    POSTS_DYNAMODB_TABLE: posts

provider:
  name: aws
  runtime: nodejs6.10
  region: eu-west-2
  environment: ${self:custom.settings}
  iamRoleStatements:
   - Effect: "Allow"
     Action:
       - "dynamodb:GetPost"
       - "dynamodb:PutPost"
       - "dynamodb:UpdatePost"
       - "dynamodb:DeletePost"
     Resource:
      - "arm:aws:dynamodb:${self:provider.region}:*:table/${self:custom.settings.POSTS_DYNAMODB_TABLE}"

functions:
  savePost:
    handler: handler.savePost
    events:
      - http:
        path: post
        method: post
  getPost:
    handler: handler.getPost
    events:
      - http:
        path: post/{postId}
        method: get
  deletePost:
    handler: handler.deletePost
    events:
      - http:
        path: post/{postId}
        method: delete
  updatePost:
    handler: handler.updatePost
    events:
      - http:
        path: post/{postId}
        method: put

resources:
 Resources:
   PostsTable:
     Type: AWS::DynamoDB::Table
     Properties:
       AttributeDefinitions:
       - AttributeName: "PostId"
         AttributeType: "S"
      KeySchema:
      - AttributeName: "PostId"
        KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      TableName: ${self:custom.settings.POSTS_DYNAMODB_TABLE}



# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  hello:
    handler: handler.hello

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
